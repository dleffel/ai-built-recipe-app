name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_FRONTEND: recipe-app-frontend
  ECR_REPOSITORY_BACKEND: recipe-app-api
  APP_RUNNER_SERVICE_ARN_FRONTEND: arn:aws:apprunner:us-east-1:959015000320:service/recipe-app-frontend/a5924d24983b45d387c61f2f6c2e8e4b
  APP_RUNNER_SERVICE_ARN_BACKEND: arn:aws:apprunner:us-east-1:959015000320:service/recipe-app-api/af3d019dde794fdd92dd619da3d0d357

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Run Tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cd frontend && npm test -- --watchAll=false
          cd ../backend && npm test

  build-and-deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      # Debug step to verify GitHub context
      - name: Debug GitHub Context
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Role ARN: ${{ secrets.AWS_ROLE_ARN }}"
          echo "OIDC Subject: repo:${{ github.repository }}:ref:${{ github.ref }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Debug step to verify AWS identity
      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:${{ github.sha }} \
            --build-arg REACT_APP_API_URL=https://api.recipes.dannyleffel.com .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:${{ github.sha }}
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:${{ github.sha }} \
            $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

      - name: Build and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ github.sha }}
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ github.sha }} \
            $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

      - name: Deploy to App Runner
        run: |
          # Get current backend configuration
          CURRENT_CONFIG=$(aws apprunner describe-service --service-arn ${{ env.APP_RUNNER_SERVICE_ARN_BACKEND }} --query 'Service.SourceConfiguration.ImageRepository' --output json)
          
          # Update frontend service
          aws apprunner update-service \
            --service-arn ${{ env.APP_RUNNER_SERVICE_ARN_FRONTEND }} \
            --source-configuration '{"ImageRepository": {"ImageIdentifier": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}", "ImageRepositoryType": "ECR"}}'

          # Get current environment variables and add/update CLIENT_URL
          CURRENT_ENV=$(echo "$CURRENT_CONFIG" | jq '.ImageConfiguration.RuntimeEnvironmentVariables')
          UPDATED_ENV=$(echo "$CURRENT_ENV" | jq '. + {"CLIENT_URL": "https://recipes.dannyleffel.com"}')

          # Update backend service with migration command and updated env vars
          aws apprunner update-service \
            --service-arn ${{ env.APP_RUNNER_SERVICE_ARN_BACKEND }} \
            --source-configuration "{
              \"ImageRepository\": {
                \"ImageIdentifier\": \"${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}\",
                \"ImageRepositoryType\": \"ECR\",
                \"ImageConfiguration\": {
                  \"Port\": \"3000\",
                  \"RuntimeEnvironmentVariables\": $UPDATED_ENV,
                  \"StartCommand\": \"npx prisma migrate deploy && node dist/index.js\"
                }
              }
            }"